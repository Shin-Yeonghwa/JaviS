반복문
반복문을 사용하면 단순히 똑같은 코드를 반복하기도 하지만, 반복할 때마다 숫자를 1씩 더한다든지의 행동을 할 수도 있습니다.
반복문은 for과 while이 대표적입니다.

For
뭔가 복잡해 보이네요. for문은 for (시작; 조건; 끝) { 내용 } 이렇게 구성 되어 있습니다. 위의 예시를 분석해보면 시작은 var i = 0;으로 하고, 조건은 i < 10이고, 끝은 i++입니다.

While
while문은 while (조건) { 내용 } 이렇게 구성됩니다. 위의 for문과는 같은 결과를 내지만, 시작부분은 while 전에 써주고, 끝 부분은 while 내용 안에 직접 써주어야 합니다.

for과 while의 사용법
언제 for을 사용하고, 언제 while을 사용하느냐가 궁금하실 겁니다. while은 조건밖에 없기 때문에 몇 번 반복될 지 모를 때 주로 사용되고, for문은 반복 횟수를 정할 수 있기 때문에 몇 번 반복될 지 알 때 주로 사용됩니다.

break과 continue
while문 안에 break;를 반복문을 넣으면 중단할 수 있습니다.
break과 비슷한 것으로 continue가 있습니다. 반복문을 끝까지 돌기는 하지만, continue가 있으면 그 아랫부분은 실행하지 않고 다음 반복문으로 넘어갑니다. continue는 반복문의 공통된 수행 작업에서 예외를 두고 싶을 때 사용하면 좋습니다.

Do ~ While
while의 변형으로 do ~ while도 있습니다.
비슷하긴 한데요. do ~ while은 그냥 while에 비해 내용을 먼저 실행한 후에 조건을 비교합니다. while은 조건을 먼저 비교한 후에 내용을 실행하고요. 그러니까 do ~ while은 내용이 최소 1번은 실행된다는 거죠. while이나 for보다는 잘 쓰이지 않습니다.

주의
반복문을 할 때 조심해야할 점은, 절대로 무한 반복되는 상황을 만들어서는 안 된다는 겁니다. 바로 위의 코드에서 i++;를 빼면, i는 영원히 0이고, i는 영원히 10보다 작기때문에 계속해서 반복문이 실행됩니다. 그렇게 되면 프로그램은 메모리 부족이나 CPU 풀가동으로 멈추고 맙니다. 


함수
자바스크립트의 함수는 일급 객체로, 코드 재용, 정보의 구성 및 은닉 등에 사용하는 모듈화의 근간이다.

함수 객체
함수는 객체이다. 따라서 프로토타입 체인이 있다.
모든 프로토타입 객체는 함수 자체를 가리키는 constructor 속성이 있으므로, 함수도 마찬가지다.

함수 리터럴
- function 예약어 다음에 이름을 붙여도 되고 안 붙여도 된다. 붙이면 디버거에서 함수 이름이 보인다는 장점이 있다.
- 호출시 전달하지 않은 매개변수는 undefined로 초기화 되고, 초과 전달된 매개변수는 무시된다.

반환
return 문을 이용해서 값을 반환할 수 있고, 반환값이 지정되지 않은 경우에는 undefined가 반환된다.

예외
throw 문을 이용해서 예외를 발생 시킬 수 있다. name 속성과 message 속성은 반드시 포함해야 하며, 추가 속성도 가능하다.

함수 호출
모든 함수는 호출시 명시된 매개변수에 더해 this와 arguments라는 추가적인 매개변수 두 개를 받는다. 이 때 this는, 함수를 호출하는 4가지 방식에 따라서 다르게 초기화 된다.

 - 메소드 호출 패턴 : 함수를 객체의 속성으로 저장하는 경우, 이 함수를 메소드라고 부른다. 메소드를 호출할 때, this는 메소드를 포함하고 있는 객체에 바인딩, 즉, 객체 자체가 된다. 이렇게 객체 자체를 this에 바인딩하는 메소드를 퍼블릭 메소드라고 한다.
 - 함수 호출 패턴 :함수가 객체의 속성이 아닌 경우는 함수로서 호출되고, 이 경우 this는 전역 객체에 바인딩 된다. 이는 명백한 설계 오류로, 만약 바르게 설계되었다면 내부 함수의 this는 외부 함수의 this에 바인딩되었어야 할 것이다.
 - 생성자 호출 패턴 : 함수를 new 문과 함께 호출하는 방법이다. 이 경우 함수의 프로토타입 객체의 constructor 속성을 이용해 호출한다.
 - apply, call 호출 패턴 : 함수도 객체이기 때문에 메소드를 가질 수 있다. apply, call 메소드는 자바스크립트의 모든 함수에 포함되어 있는 메소드이다. 첫 번 째 매개변수로 함수 안에서 this에 묶이게 될 값을 넘길 수 있다. apply, call의 차이점은 다음과 같다.
apply: 호출하려고 하는 함수의 매개변수들의 배열을 두 번 째 매개변수로 넘긴다. (arguments)
call: 호출하려고 하는 함수의 매개변수들을 두 번 째, 세 번 째 ... 매개변수로 넘긴다.
